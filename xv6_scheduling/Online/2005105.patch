diff --git a/2005105.patch b/2005105.patch
new file mode 100644
index 0000000..a165612
--- /dev/null
+++ b/2005105.patch
@@ -0,0 +1,279 @@
+diff --git a/2005105.patch b/2005105.patch
+new file mode 100644
+index 0000000..e69de29
+diff --git a/Makefile b/Makefile
+index 62fd0f8..0dd64af 100644
+--- a/Makefile
++++ b/Makefile
+@@ -139,6 +139,7 @@ UPROGS=\
+ 	$U/_grind\
+ 	$U/_wc\
+ 	$U/_zombie\
++	$U/_testloop\
+ 
+ fs.img: mkfs/mkfs README $(UPROGS)
+ 	mkfs/mkfs fs.img README $(UPROGS)
+@@ -160,7 +161,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
+ 	then echo "-gdb tcp::$(GDBPORT)"; \
+ 	else echo "-s -p $(GDBPORT)"; fi)
+ ifndef CPUS
+-CPUS := 3
++CPUS := 1
+ endif
+ 
+ QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
+diff --git a/kernel/proc.c b/kernel/proc.c
+index 58a8a0b..6bc0c77 100644
+--- a/kernel/proc.c
++++ b/kernel/proc.c
+@@ -146,6 +146,8 @@ found:
+   p->context.ra = (uint64)forkret;
+   p->context.sp = p->kstack + PGSIZE;
+ 
++  p->priority = 1000; // default priority
++
+   return p;
+ }
+ 
+@@ -441,22 +443,76 @@ wait(uint64 addr)
+ //  - swtch to start running that process.
+ //  - eventually that process transfers control
+ //    via swtch back to the scheduler.
+-void
+-scheduler(void)
++void scheduler(void)
+ {
+   struct proc *p;
++  struct proc *q;
+   struct cpu *c = mycpu();
+ 
+   c->proc = 0;
+-  for(;;){
++  for (;;)
++  {
+     // The most recent process to run may have had interrupts
+     // turned off; enable them to avoid a deadlock if all
+     // processes are waiting.
+     intr_on();
+ 
+-    for(p = proc; p < &proc[NPROC]; p++) {
++    int win_priority = 0;
++    int win_len = 0;
++    struct proc *win_proc[NPROC] = {0};
++
++    for (p = proc; p < &proc[NPROC]; p++)
++    {
++      acquire(&p->lock);
++      if (p->state == RUNNABLE)
++      {
++        if (win_len == 0 || p->priority > win_priority)
++        {
++          memset(win_proc, 0, sizeof(win_proc));
++          win_len = 0;
++          win_priority = p->priority;
++          win_proc[win_len++] = p;
++        }
++        else if (p->priority == win_priority)
++        {
++          win_proc[win_len++] = p;
++        }
++      }
++      release(&p->lock);
++    }
++
++    if (win_len == 1)
++    {
++      acquire(&win_proc[0]->lock);
++      win_proc[0]->state = RUNNING;
++      c->proc = win_proc[0];
++      swtch(&c->context, &win_proc[0]->context);
++      c->proc = 0;
++
++      for(q = proc; q < &proc[NPROC]; q++){
++        if(q!=win_proc[0]){
++          if(q->state == RUNNABLE){
++            q->waiting_time++;
++
++            if(q->waiting_time > 30){
++              q->priority += 10;
++              printf("Process %d priority increased to %d\n", q->pid, q->priority);
++              q->waiting_time = 0;
++            }
++          }
++        }
++      }
++
++      release(&win_proc[0]->lock);
++      continue;
++    }
++
++    for (int i = 0; i < win_len; i++)
++    {
++      p = win_proc[i];
+       acquire(&p->lock);
+-      if(p->state == RUNNABLE) {
++      if (p->state == RUNNABLE)
++      {
+         // Switch to chosen process.  It is the process's job
+         // to release its lock and then reacquire it
+         // before jumping back to us.
+@@ -467,6 +523,22 @@ scheduler(void)
+         // Process is done running for now.
+         // It should have changed its p->state before coming back.
+         c->proc = 0;
++
++        for(q = proc; q < &proc[NPROC]; q++){
++          if(q!=p){
++            if(q->state == RUNNABLE){
++              q->waiting_time++;
++
++              if(q->waiting_time > 30){
++                q->priority += 10;
++                printf("Process %d priority increased to %d\n", q->pid, q->priority);
++                q->waiting_time = 0;
++              }
++            }
++          }
++        }
++
++        
+       }
+       release(&p->lock);
+     }
+diff --git a/kernel/proc.h b/kernel/proc.h
+index d021857..ab0da74 100644
+--- a/kernel/proc.h
++++ b/kernel/proc.h
+@@ -104,4 +104,8 @@ struct proc {
+   struct file *ofile[NOFILE];  // Open files
+   struct inode *cwd;           // Current directory
+   char name[16];               // Process name (debugging)
++
++  int priority;
++  int running_time;
++  int waiting_time;
+ };
+diff --git a/kernel/syscall.c b/kernel/syscall.c
+index ed65409..46c79b2 100644
+--- a/kernel/syscall.c
++++ b/kernel/syscall.c
+@@ -102,6 +102,9 @@ extern uint64 sys_link(void);
+ extern uint64 sys_mkdir(void);
+ extern uint64 sys_close(void);
+ 
++extern uint64 sys_setpriority(void);
++extern uint64 sys_getpriority(void);
++
+ // An array mapping syscall numbers from syscall.h
+ // to the function that handles the system call.
+ static uint64 (*syscalls[])(void) = {
+@@ -126,6 +129,9 @@ static uint64 (*syscalls[])(void) = {
+ [SYS_link]    sys_link,
+ [SYS_mkdir]   sys_mkdir,
+ [SYS_close]   sys_close,
++
++[SYS_setpriority]  sys_setpriority,
++[SYS_getpriority]  sys_getpriority,
+ };
+ 
+ void
+diff --git a/kernel/syscall.h b/kernel/syscall.h
+index bc5f356..3ad712a 100644
+--- a/kernel/syscall.h
++++ b/kernel/syscall.h
+@@ -20,3 +20,5 @@
+ #define SYS_link   19
+ #define SYS_mkdir  20
+ #define SYS_close  21
++#define SYS_setpriority 22
++#define SYS_getpriority 23
+\ No newline at end of file
+diff --git a/kernel/sysproc.c b/kernel/sysproc.c
+index 3b4d5bd..b224408 100644
+--- a/kernel/sysproc.c
++++ b/kernel/sysproc.c
+@@ -91,3 +91,26 @@ sys_uptime(void)
+   release(&tickslock);
+   return xticks;
+ }
++
++uint64
++sys_setpriority()
++{
++	int x;
++	argint(0, &x);
++	struct proc *p = myproc();
++	acquire(&p->lock);
++	p->priority = x;
++	release(&p->lock);
++	return 0;
++}
++
++uint64
++sys_getpriority()
++{
++	int x;
++	struct proc *p = myproc();
++	acquire(&p->lock);
++	x = p->priority;
++	release(&p->lock);
++	return x;
++}
+\ No newline at end of file
+diff --git a/user/testloop.c b/user/testloop.c
+new file mode 100644
+index 0000000..3ab555d
+--- /dev/null
++++ b/user/testloop.c
+@@ -0,0 +1,26 @@
++#include "kernel/types.h"
++#include "kernel/stat.h"
++#include "user/user.h"
++#define BYEL "\e[1;33m"
++#define BRED "\e[1;31m"
++#define CRESET "\e[0m"
++
++int main(int argc, char* argv[]){
++    int pid = getpid();
++    uint32 iters = atoi(argv[1]);
++    int priority = atoi(argv[2]);
++    setpriority(priority);
++    sleep(5); // to let the scheduler run and set the priority
++    int entry_time = uptime();
++    printf(BYEL "PID %d: Starting %u iterations at time %d. Initial priority: %d, current: %d\n" CRESET, pid, iters, entry_time, priority, getpriority());
++    for(int i = 0; i < iters; i++){
++        // do some dummy work
++        for(int j = 0; j < 50000000; j++){
++            int x = j * j;
++            x = x + 1;
++        }
++    }
++    int exit_time = uptime();
++    printf(BRED "PID %d: Finished at time %d. Initial pr: %d, current: %d\n" CRESET, pid, exit_time, priority, getpriority());
++    exit(0);
++}
+\ No newline at end of file
+diff --git a/user/user.h b/user/user.h
+index 04013ca..26669f5 100644
+--- a/user/user.h
++++ b/user/user.h
+@@ -22,6 +22,8 @@ int getpid(void);
+ char* sbrk(int);
+ int sleep(int);
+ int uptime(void);
++int setpriority(int);
++int getpriority(void);
+ 
+ // ulib.c
+ int stat(const char*, struct stat*);
+diff --git a/user/usys.pl b/user/usys.pl
+index 01e426e..13f8654 100755
+--- a/user/usys.pl
++++ b/user/usys.pl
+@@ -36,3 +36,5 @@ entry("getpid");
+ entry("sbrk");
+ entry("sleep");
+ entry("uptime");
++entry("setpriority");
++entry("getpriority");
+\ No newline at end of file
diff --git a/Makefile b/Makefile
index 62fd0f8..0dd64af 100644
--- a/Makefile
+++ b/Makefile
@@ -139,6 +139,7 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_testloop\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
@@ -160,7 +161,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 3
+CPUS := 1
 endif
 
 QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
diff --git a/kernel/proc.c b/kernel/proc.c
index 58a8a0b..6bc0c77 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -146,6 +146,8 @@ found:
   p->context.ra = (uint64)forkret;
   p->context.sp = p->kstack + PGSIZE;
 
+  p->priority = 1000; // default priority
+
   return p;
 }
 
@@ -441,22 +443,76 @@ wait(uint64 addr)
 //  - swtch to start running that process.
 //  - eventually that process transfers control
 //    via swtch back to the scheduler.
-void
-scheduler(void)
+void scheduler(void)
 {
   struct proc *p;
+  struct proc *q;
   struct cpu *c = mycpu();
 
   c->proc = 0;
-  for(;;){
+  for (;;)
+  {
     // The most recent process to run may have had interrupts
     // turned off; enable them to avoid a deadlock if all
     // processes are waiting.
     intr_on();
 
-    for(p = proc; p < &proc[NPROC]; p++) {
+    int win_priority = 0;
+    int win_len = 0;
+    struct proc *win_proc[NPROC] = {0};
+
+    for (p = proc; p < &proc[NPROC]; p++)
+    {
+      acquire(&p->lock);
+      if (p->state == RUNNABLE)
+      {
+        if (win_len == 0 || p->priority > win_priority)
+        {
+          memset(win_proc, 0, sizeof(win_proc));
+          win_len = 0;
+          win_priority = p->priority;
+          win_proc[win_len++] = p;
+        }
+        else if (p->priority == win_priority)
+        {
+          win_proc[win_len++] = p;
+        }
+      }
+      release(&p->lock);
+    }
+
+    if (win_len == 1)
+    {
+      acquire(&win_proc[0]->lock);
+      win_proc[0]->state = RUNNING;
+      c->proc = win_proc[0];
+      swtch(&c->context, &win_proc[0]->context);
+      c->proc = 0;
+
+      for(q = proc; q < &proc[NPROC]; q++){
+        if(q!=win_proc[0]){
+          if(q->state == RUNNABLE){
+            q->waiting_time++;
+
+            if(q->waiting_time > 30){
+              q->priority += 10;
+              printf("Process %d priority increased to %d\n", q->pid, q->priority);
+              q->waiting_time = 0;
+            }
+          }
+        }
+      }
+
+      release(&win_proc[0]->lock);
+      continue;
+    }
+
+    for (int i = 0; i < win_len; i++)
+    {
+      p = win_proc[i];
       acquire(&p->lock);
-      if(p->state == RUNNABLE) {
+      if (p->state == RUNNABLE)
+      {
         // Switch to chosen process.  It is the process's job
         // to release its lock and then reacquire it
         // before jumping back to us.
@@ -467,6 +523,22 @@ scheduler(void)
         // Process is done running for now.
         // It should have changed its p->state before coming back.
         c->proc = 0;
+
+        for(q = proc; q < &proc[NPROC]; q++){
+          if(q!=p){
+            if(q->state == RUNNABLE){
+              q->waiting_time++;
+
+              if(q->waiting_time > 30){
+                q->priority += 10;
+                printf("Process %d priority increased to %d\n", q->pid, q->priority);
+                q->waiting_time = 0;
+              }
+            }
+          }
+        }
+
+        
       }
       release(&p->lock);
     }
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..ab0da74 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,8 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+  int priority;
+  int running_time;
+  int waiting_time;
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..46c79b2 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -102,6 +102,9 @@ extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
 
+extern uint64 sys_setpriority(void);
+extern uint64 sys_getpriority(void);
+
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
 static uint64 (*syscalls[])(void) = {
@@ -126,6 +129,9 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+
+[SYS_setpriority]  sys_setpriority,
+[SYS_getpriority]  sys_getpriority,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..3ad712a 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_setpriority 22
+#define SYS_getpriority 23
\ No newline at end of file
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 3b4d5bd..b224408 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -91,3 +91,26 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_setpriority()
+{
+	int x;
+	argint(0, &x);
+	struct proc *p = myproc();
+	acquire(&p->lock);
+	p->priority = x;
+	release(&p->lock);
+	return 0;
+}
+
+uint64
+sys_getpriority()
+{
+	int x;
+	struct proc *p = myproc();
+	acquire(&p->lock);
+	x = p->priority;
+	release(&p->lock);
+	return x;
+}
\ No newline at end of file
diff --git a/user/testloop.c b/user/testloop.c
new file mode 100644
index 0000000..3ab555d
--- /dev/null
+++ b/user/testloop.c
@@ -0,0 +1,26 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#define BYEL "\e[1;33m"
+#define BRED "\e[1;31m"
+#define CRESET "\e[0m"
+
+int main(int argc, char* argv[]){
+    int pid = getpid();
+    uint32 iters = atoi(argv[1]);
+    int priority = atoi(argv[2]);
+    setpriority(priority);
+    sleep(5); // to let the scheduler run and set the priority
+    int entry_time = uptime();
+    printf(BYEL "PID %d: Starting %u iterations at time %d. Initial priority: %d, current: %d\n" CRESET, pid, iters, entry_time, priority, getpriority());
+    for(int i = 0; i < iters; i++){
+        // do some dummy work
+        for(int j = 0; j < 50000000; j++){
+            int x = j * j;
+            x = x + 1;
+        }
+    }
+    int exit_time = uptime();
+    printf(BRED "PID %d: Finished at time %d. Initial pr: %d, current: %d\n" CRESET, pid, exit_time, priority, getpriority());
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 04013ca..26669f5 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int setpriority(int);
+int getpriority(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..13f8654 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("setpriority");
+entry("getpriority");
\ No newline at end of file
